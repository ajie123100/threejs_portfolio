/*
    Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import gsap from 'gsap'; // 导入 GSAP 动画库
import { useGSAP } from '@gsap/react'; // 导入 GSAP 的 React 钩子
import { useRef, useState } from 'react'; // 导入 React 钩子
import { Float, useGLTF, useTexture } from '@react-three/drei'; // 导入 drei 库中的组件和钩子
import * as THREE from 'three'; // 导入 Three.js 库

const Cube = ({ ...props }) => {
    // 使用 useGLTF 加载 GLTF 模型
    const { nodes } = useGLTF('models/cube.glb');

    // 使用 useTexture 加载纹理
    const texture = useTexture('textures/cube.png');

    // 使用 useRef 创建一个对 mesh 的引用
    const cubeRef = useRef<THREE.Mesh>(null);


    // 使用 useGSAP 定义动画逻辑
    useGSAP(() => {
        if (cubeRef.current) {
            // 创建 GSAP 时间线
            gsap
                .timeline({
                    repeat: -1, // 动画无限循环
                    repeatDelay: 0.5, // 每次循环之间的延迟
                })
                .to(cubeRef.current.rotation, {
                    y: `+=${Math.PI * 2}`, // 根据 hover 状态设置 Y 轴旋转
                    x: `-=${Math.PI * 2}`, // 根据 hover 状态设置 X 轴旋转
                    duration: 2.5, // 动画持续时间
                    stagger: {
                        each: 0.15, // 每个动画的延迟
                    },
                });
        }
    }, []);

    return (
        <Float floatIntensity={2}> {/* 使用 Float 组件实现浮动效果 */}
            <group position={[9, -4, 0]} rotation={[2.6, 0.8, -1.8]} scale={0.74} dispose={null} {...props}>
                <mesh
                    ref={cubeRef} // 绑定 mesh 引用
                    geometry={(nodes.Cube as THREE.Mesh).geometry} // 设置几何体
                    material={(nodes.Cube as THREE.Mesh).material} // 设置材
                >
                    <meshMatcapMaterial matcap={texture} toneMapped={false} /> {/* 使用加载的纹理作为材质 */}
                </mesh>
            </group>
        </Float>
    );
};

// 预加载 GLTF 模型
useGLTF.preload('models/cube.glb');

export default Cube;